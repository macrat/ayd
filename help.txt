Ayd? status monitoring service (version {{ .Version }})

Usage:
  {{ .Command }} [-p NUMBER | -o FILE]... INTERVALS|TARGETS...
  {{ .Command }} -1 [-o FILE] INTERVALS|TARGETS...

OPTIONS:
  -1	     Check status only once and exit. Exit with 0 if all check passed, otherwise exit with code 1.
  -a TARGET  The alert URL that the same format as target URL.
  -o FILE    Path to log file. Log file is also use for restore status history. (default "./ayd.log")
  -p PORT    Listen port of status page. (default 9000)

INTERVALS:
  Specify execution schedule in interval (e.g. "2m" means "every 2 minutes")
  or cron expression (e.g. "*/5 8-19 * *" means "every 5 minutes from 8 p.m. to 7 a.m.").
  Default interval is "5m" in if don't pass any interval.

TARGETS:
  The target address for status checking.
  Specify with URL format like "ping:example.com" or "https://example.com/foo/bar".

  http, https:
   Send HTTP request, and check status code is 2xx or not.
   It will follow redirect up to {{ .HTTPRedirectMax }} times.
   e.g. https://example.com/path/to

   You can specify HTTP method in scheme like "http-head" or "https-post".
   Supported method is GET, HEAD, POST, and OPTION. Default is GET method.

  ping:
   Send 4 ICMP echo request in 2 seconds.
   e.g. ping:example.com

  tcp:
   Connect to TCP port.
   e.g. tcp://example.com:3306

  dns:
   Resolve name with DNS.
   e.g. dns:example.com

  exec:
   Execute external command.
   You can set 1st argument with fragment,
   and you can set environment variable with query.
   e.g. exec:/path/to/script?something_variable=awesome-value#argument-for-script

  source:
   Load a file, and test target URLs of each lines.
   Lines in the file that starts with "#" will ignore as comments.
   e.g. source:/path/to/list.txt

EXAMPLES:
  Send ping to example.com in default interval(5m):
   $ {{ .Command }} ping:example.com

  Send ping to example.com every minutes:
   $ {{ .Command }} 1m ping:example.com

  Access to http://example.com every half hours:
   $ {{ .Command }} 30m http://example.com

  Check a.local(ping) and b.local(http) every minutes,
  and execute ./check.sh command every 15 minutes:
   $ {{ .Command }} 1m ping:a.local http://b.local 15m exec:./check.sh

  Check targets that listed in file named "./list.txt":
   $ echo ping:a.local >> list.txt
   $ echo ping:b.local >> list.txt
   $ {{ .Command }} source:./list.txt

  Listen on http://0.0.0.0:8080 (and connect to example.com:3306 for check):
   $ {{ .Command }} -p 8080 1m tcp://example.com:3306

SEEALSO:
  https://github.com/macrat/ayd#readme
